@model DetailCourseViewModel

@{
	this.ViewData["Title"] = $"Details: {Model.Name}";
	var count = 0;

	var userId = this.User.GetId();
	this.ViewBag.CourseId = Model.Id;
}

@inject UserManager<ApplicationUser> userManager

@section Styles{
	 <link href="/css/course.css" rel="stylesheet" />
}

<div class="text-center p-4" style="background-color: #F1F1F1">
	<h1>@Model.Name</h1>
	<h6>Start date: @Model.StartDate</h6>
</div>
<div class="container">
	<div class="shadow-box mt-5 mb-5">
		<div class="p-3">
			<h3 class="text-center">Lessons</h3>
			<hr />
		</div>
		<div class="container overflow-hidden">
			<div class="row gx-5 mb-3">
				@foreach (var lesson in Model.Lessons)
				{
					<div class="col-sm-12 col-md-6">
						<div class="lesson-details" data-lessonId=@lesson.Id style="cursor: pointer">
							<div class="p-2 mt-1 border" style="background-color: #f1f1f1;">
								<span class="lesson-title">@(++count). @lesson.Title</span>
							</div>
						</div>
						<div id="@lesson.Id" class="lesson-box d-none p-2 mt-1 border">
							@{
								//Generate with js!
							}
						</div>
					</div>
				}
			</div>
			@if(this.User.IsAdministrator()){
				<div class="d-flex justify-content-between align-items-center p-3">
					<a asp-action="Update" asp-route-id="@Model.Id">Update</a>
					<a asp-action="Delete" asp-route-id="@Model.Id">Delete</a>
				</div>
			}
		</div>
	</div>
	<div class="text-center">
		<button id="show-information-btn" class="btn btn-primary rounded-pill mb-3 w-25 p-2">Show More</button>
	</div>
	<div id="information-box" class="d-none">
		<div class="shadow-box offset-md-1 col-sm col-md-10 mb-5 p-3">
			<h5>Description</h5>
			<div>
				@Model.Description
			</div>
		</div>
		<div class="shadow-box offset-md-1 col-sm col-md-10 mb-5 p-3">
			<h5 class="mb-3">Reviews</h5>
			<div>
				@foreach (var review in Model.Reviews)
				{
					<div class="card mb-4">
						<div class="card-body">
							<p>@review.Content</p>

							<div class="d-flex justify-content-between">
								<div class="d-flex flex-row align-items-center">
									<img src="@review.UserImageIRL" alt="avatar" width="25"
									 height="25" />
									<p class="small pl-2 mb-0 ms-2">@review.Username</p>
								</div>
								<div class="d-flex flex-row align-items-center">
									@if (review.UserId == this.User.GetId() || this.User.IsInRole(GlobalConstants.ADMIN_ROLE))
									{
										<div>
											<a class="options-bar"
											   asp-controller="CourseReviews"
											   asp-action="Update"
											   asp-route-id=@review.Id
											   asp-route-courseId="@Model.Id">Update
										   </a>
											<span>|</span>
											<a class="options-bar"
											  asp-controller="CourseReviews"
											   asp-action="Delete"
											   asp-route-reviewId=@review.Id
											   asp-route-courseId="@Model.Id">Delete
											</a>
										</div>
									}
								</div>
							</div>
						</div>
					</div>
				}
			</div>
		</div>
	</div>
	<div class="text-center">
		@if (!this.User.IsUserInCourse(userManager, Model.Id, userId))
		{
			<a 
				asp-area="Trainings"
				asp-controller="RegisterForCourse"
				asp-action="Apply"
				asp-route-id="@Model.Id"
				class="btn btn-primary rounded-pill w-25 p-2">
				Register for course
			</a>
		}
		else if (this.User.IsUserInCourse(userManager, Model.Id, userId) || this.User.IsAdministrator())
		{
			<div class="text-center mb-3">
				<button id="show-review-form-btn" class="btn btn-primary rounded-pill mb-3 w-25 p-2">Leave a review</button>
			</div>
			<div id="review-form" class="d-none offset-md-1 col-sm col-md-10">
				<div>
					<form 
						asp-area="Trainings"
						asp-controller="CourseReviews" 
						asp-action="Create" 
						asp-route-courseId="@Model.Id" method="post">
						<div class="form-group">
							<textarea asp-for="@Model.Content" class="form-control" style="height: 200px"></textarea>
							<span asp-validation-for="@Model.Content" class="text-danger"></span>
						</div>
						<div class="form-group text-center">
							<input type="submit" value="Submit" class="btn btn-primary w-25 rounded-pill" />
						</div>
					</form>
				</div>
			</div>
		}
	</div>
</div>

@section Scripts{

	@{await Html.RenderPartialAsync("_ValidationScriptsPartial");}

	<script>
		$('.lesson-details').on('click', function() {

			let lessonId = $(this).attr('data-lessonId');
			changeLessonDetailsDisplay(lessonId);

		});

		function changeLessonDetailsDisplay(lessonId) {
			let lessonBoxToDisplay = document.getElementById(lessonId);

			if (lessonBoxToDisplay.classList.contains('d-none')) {

				$.get(`/api/lessons?id=${lessonId}`, (data) => {
					$('.lesson-box').html(generateHtmlForDetailsBox(data));
				});

				let lessonsBoxs = document.getElementsByClassName('lesson-box');
				for (let i = 0; i < lessonsBoxs.length; i++) {
					lessonsBoxs[i].classList.add('d-none');
				}

				setTimeout(function () {
					lessonBoxToDisplay.classList.remove('d-none');
				}, 100);
			}
			else {
				lessonBoxToDisplay.classList.add('d-none');
			}
		}

		function generateHtmlForDetailsBox(data){
			let divElement = document.createElement('div');
			divElement.classList.add('p-2');

			let titleElement = formatTitle(data.title);
			let contentElement = formatContent(data.content);
			let dateElement = formatDate(data.begining, data.end);
			let resourcesTitleElement = document.createElement('p');
			resourcesTitleElement.style.cssText = "font-size: 18px; font-family: Verdana";
			resourcesTitleElement.textContent = "Resources";
			let resourceElement = formatResource(data.resources);

			divElement.appendChild(titleElement);
			divElement.appendChild(contentElement);
			divElement.appendChild(dateElement);
			divElement.appendChild(resourcesTitleElement);
			divElement.appendChild(resourceElement);

			return divElement;
		}

		function formatTitle(title){
			let titleParagraphAsElement = document.createElement('p');

			titleParagraphAsElement.style.cssText = "font-size: 18px; font-family: Verdana";
			titleParagraphAsElement.textContent = title;

			return titleParagraphAsElement;
		}

		function formatContent(content){
			let contentAsArray = content.split(/\r?\n/);
			let ulElement = document.createElement('ul');

			for (let i = 0; i < contentAsArray.length; i++) {
				let liElement = document.createElement('li');
				liElement.innerHTML = contentAsArray[i];
				ulElement.appendChild(liElement);
			}

			return ulElement;
		}

		function formatDate(begining, end){
			let pElement = document.createElement('p');

			let beginingAsDate = new Date(begining);
			let endAsDate = new Date(end);

			let date = beginingAsDate.toLocaleDateString('default', {day: '2-digit', month: 'long'});
			let day = beginingAsDate.toLocaleDateString('default', {weekday: 'long'});
			let from = getDateHoursAndMinutesToSecondDigit(beginingAsDate);
			let to = getDateHoursAndMinutesToSecondDigit(endAsDate);

			let dateAsString = `Date: ${date} (${day}), from ${from} to ${to}.`;

			pElement.textContent = dateAsString;
			return pElement;
		}

		function getDateHoursAndMinutesToSecondDigit(date){
			return date.getHours() + ':' + String(date.getMinutes()).padStart(2, '0');
		}

		function formatResource(resources){
			let pElement = document.createElement('p');
			pElement.textContent = "No resources yet";

			if(resources.length != 0){

				pElement.textContent = "";
				for (let index = 0; index < resources.length; index++) {
					let currentResource = resources[index];
					let id = currentResource.id;

					let aElement = document.createElement('a');

					aElement.href = `/Trainings/Resources/Details/${id}`;
					aElement.textContent = currentResource.name;

					pElement.appendChild(aElement);
				}
			}

			return pElement;
		}

	</script>

	<script>
		let informationBtn = document.getElementById('show-information-btn');
		let reviewBtn = document.getElementById('show-review-form-btn');

		informationBtn.addEventListener('click', () => displayMoreInformation('information-box'));
		if(reviewBtn !== null){
			reviewBtn.addEventListener('click', () => displayMoreInformation('review-form'));
		}


		function displayMoreInformation(elementId) {

			let box = document.getElementById(elementId);

			if (box.classList.contains('d-none')) {
				box.classList.remove('d-none');
				switch (elementId) {
					case 'information-box': informationBtn.innerHTML = 'Show Less'; break;
				}
			}
			else {
				box.classList.add('d-none');
				switch (elementId) {
					case 'information-box': informationBtn.innerHTML = 'Show More'; break;
				}
			}
		}
	</script>
}