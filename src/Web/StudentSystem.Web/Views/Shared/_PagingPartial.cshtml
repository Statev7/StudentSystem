@using StudentSystem.ViewModels.Page
@model PageViewModel
@{
    if (Model.CurrentPage > Model.TotalPages)
    {
        Model.CurrentPage = Model.TotalPages;
    }
}

<nav class="mt-3">
    <ul class="pagination justify-content-center">
        <li class="page-item @(Model.HasPrevious == false ? "disabled" : string.Empty)">
            <a class="page-link" href="@Url.Page("",
					new {currentPage = Model.PreviousPage, filters = Model.Filters, search = Model.Search})">
                Previous
            </a>
        </li>

        @for (int index = Model.CurrentPage - 3; index < Model.CurrentPage; index++)
        {
            if (index >= 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Page("",
							new {currentPage = index, filters = Model.Filters, search = Model.Search})">
                        @index
                    </a>
                </li>
            }
        }

        <li class="page-item active">
            <a class="page-link" href="@Url.Page("",
					new {currentPage = Model.CurrentPage, filters = Model.Filters, search = Model.Search})">
                @Model.CurrentPage
            </a>
        </li>

        @for (int index = 1; index < Model.CurrentPage + 3; index++)
        {
            if (Model.TotalPages >= Model.CurrentPage + index)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Page("",
							new {currentPage = Model.CurrentPage + index, filters = Model.Filters, search = Model.Search})">
                        @(Model.CurrentPage + index)
                    </a>
                </li>
            }
        }
        <li class="page-item @(Model.HasNext == false ? "disabled" : string.Empty)">
            <a class="page-link" href="@Url.Page("",
					new {currentPage = Model.NextPage, filters = Model.Filters, search = Model.Search})">
                Next
            </a>
        </li>
    </ul>
</nav>